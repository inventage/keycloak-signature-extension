{"version":3,"file":"keycloak-signature.js","sourceRoot":"","sources":["src/keycloak-signature.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {LitElement, html, css} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n\n/**\n * An example element.\n *\n * @fires count-changed - Indicates when the count changes\n * @slot - This element has a slot\n * @csspart button - The button\n */\n@customElement('keycloak-signature')\nexport class KeycloakSignature extends LitElement {\n  static override styles = css`\n    :host {\n      display: block;\n      border: solid 1px gray;\n      padding: 16px;\n      max-width: 800px;\n    }\n  `;\n\n  @property()\n  keycloakSignEndpoint = '/realms/master/activate_order/sign';\n\n  override render() {\n    return html`\n      <p>\n      <h1>Title</h1>\n      <slot>This is the body</slot>\n      <button id=\"acceptButton\" @click=\"${this.handleAcceptButtonClick}\">accept</button>\n      <button id=\"rejectButton\" @click=\"${this.handleRejectButtonClick}\">reject</button>\n      </p>\n    `;\n  }\n\n  override firstUpdated() {\n    const rejectButton = this.shadowRoot!.getElementById('rejectButton');\n\n    rejectButton!.addEventListener('click', () => {\n      console.log('Reject Button pressed');\n    });\n  }\n\n  async handleAcceptButtonClick() {\n    console.log(\"handleAcceptButtonClick: Accept Button clicked!\")\n\n    try {\n      // const url = '/realms/koerber/activate_order/sign?redirect_uri=http%3A%2F%2Fgoogle.com%3Ftest1%3D1%26test2%3D2&description=this_is_an_order'; // Replace with your API endpoint\n      const url = this.keycloakSignEndpoint;\n      const data = {\n        // Define the data you want to send in the request body\n        key1: 'value1',\n        key2: 'value2',\n      };\n\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json', // Set the appropriate content type\n        },\n        body: JSON.stringify(data), // Convert the data to JSON format\n      });\n\n      if (response.ok) {\n        // The POST request was successful\n        console.log('POST request successful');\n        console.log(\"headers: \" + response.headers)\n        const bodyJson = await response.json();\n        console.log(\"JWT: \" + bodyJson.signedPayload);\n\n        const eventAccepted = new CustomEvent('keycloak-signed-payload', {\n          detail: {\n            signedPayload: bodyJson.signedPayload,\n          },\n          bubbles: true, // Allow the event to bubble up the DOM tree\n          composed: true, // Allow the event to cross shadow DOM boundaries\n        });\n\n        this.dispatchEvent(eventAccepted);\n\n      } else {\n        // Handle errors here, e.g., display an error message\n        console.error('POST request failed');\n      }\n    } catch (error) {\n      // Handle any exceptions that may occur during the request\n      console.error('Error:', error);\n    }\n  }\n\n  handleRejectButtonClick() {\n    console.log('Reject Button pressed');\n\n    const eventRejected = new CustomEvent('rejected', {\n      detail: {\n        message: \"Signing Process has been rejected\"\n      },\n      bubbles: true, // Allow the event to bubble up the DOM tree\n      composed: true, // Allow the event to cross shadow DOM boundaries\n    });\n\n    this.dispatchEvent(eventRejected);\n  }\n\n  /**\n   * Formats a greeting\n   * @param name The name to say \"Hello\" to\n   */\n  sayHello(name: string): string {\n    return `Hello, ${name}`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'keycloak-signature': KeycloakSignature;\n  }\n}\n"]}